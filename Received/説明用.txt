初心者の変なプログラムで申し訳ありません。
組み合わせが、多くなると時間がかかるので、60秒で
loopして、何回も繰り返ししています。
なぜかこのやり方が、解をもとめるのが早いです。
一つでも見つかると終了にしています。

組み合わせによって、時間がかかると思いますが、
かかっても45分ぐらいにしていただきたいです。


class.csv が a リスト  flagのiとｍで少し条件が異なります。
teg.csv  が  b  リスト

結果をout.csvのように出力していただき。
解がない場合でもより多くの組み合わせのものout.csvに出力していただきたいです。




ここからは下は、余裕があれば作成していただきたいです。 

///////////////////////////////////////////////////////////////////////////////////////
欲を言えば、
下記の条件をある程度の範囲を変えて、多く求められるものも作成していただきたいです。
変化率と組み合わせ数が可視化出来たらなおいいです。




    elif z >= 500000:
            prob += pulp.lpSum(x[s,c] * score[s] for s in S) >= z-50000    ←ここのz-50000 *x   (1.1 1.2 1.3などに条件を変えて多く求めたい）
            prob +=  z +50000 >= pulp.lpSum(x[s,c] * score[s] for s in S)  ←ここのz+50000 *x   (1.1 1.2 1.3などに条件を変えて多く求めたい）
        else:
            prob += pulp.lpSum(x[s,c] * score[s] for s in S) >= z -10000  ←ここのz -10000 *x   (1.1 1.2 1.3などに条件を変えて多く求めたい）
            prob +=  z +10000 >= pulp.lpSum(x[s,c] * score[s] for s in S) ←ここのz +10000 *x   (1.1 1.2 1.3などに条件を変えて多く求めたい）